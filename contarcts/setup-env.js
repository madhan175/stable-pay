const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log("=".repeat(60));
  console.log("🔧 Environment Setup Helper");
  console.log("=".repeat(60));
  
  const envPath = path.join(__dirname, '.env');
  
  if (fs.existsSync(envPath)) {
    console.log("\n⚠️  .env file already exists!");
    const overwrite = await question("Do you want to overwrite it? (yes/no): ");
    if (overwrite.toLowerCase() !== 'yes') {
      console.log("❌ Setup cancelled.");
      rl.close();
      return;
    }
  }
  
  console.log("\n📝 Please provide the following information:");
  console.log("   (Press Enter to use defaults)");
  
  const privateKey = await question("\n1. Private Key (for address 0xe1774d01a097e9d2e7142cc978c7f6af9448c495): ");
  if (!privateKey.trim()) {
    console.log("❌ Private key is required!");
    rl.close();
    return;
  }
  
  // Remove 0x prefix if present
  const cleanPrivateKey = privateKey.trim().replace(/^0x/, '');
  
  const rpcUrl = await question("\n2. Sepolia RPC URL (default: Infura free tier): ");
  const defaultRpc = "https://sepolia.infura.io/v3/1d14a9defd94468f80e4a1682c47e275";
  const cleanRpcUrl = rpcUrl.trim() || defaultRpc;
  
  // Create .env content
  const envContent = `# Environment variables for contract deployment
# Generated by setup-env.js

# Sepolia Testnet Configuration
SEPOLIA_RPC_URL=${cleanRpcUrl}
PRIVATE_KEY=${cleanPrivateKey}

# Contract Addresses (will be filled after deployment)
CONTRACT_ADDRESS=
USDT_ADDRESS=0x7169D38820dfe1175Ad2E52A4A3c80C2E8f6C1b8

# Network Configuration
NETWORK_NAME=sepolia
CHAIN_ID=11155111
`;

  fs.writeFileSync(envPath, envContent);
  console.log("\n✅ .env file created successfully!");
  console.log("📍 Location:", envPath);
  
  console.log("\n🔍 Verifying configuration...");
  try {
    // Try to verify the address matches
    const { ethers } = require("hardhat");
    const wallet = new ethers.Wallet('0x' + cleanPrivateKey);
    const address = wallet.address;
    console.log("👤 Wallet address from private key:", address);
    
    if (address.toLowerCase() === '0xe1774d01a097e9d2e7142cc978c7f6af9448c495'.toLowerCase()) {
      console.log("✅ Address matches target address!");
    } else {
      console.log("⚠️  Address does NOT match target address!");
      console.log("   Target: 0xe1774d01a097e9d2e7142cc978c7f6af9448c495");
      console.log("   Actual:", address);
    }
  } catch (error) {
    console.log("⚠️  Could not verify private key:", error.message);
  }
  
  console.log("\n✨ Next steps:");
  console.log("   1. Verify configuration: npx hardhat run scripts/check-address.js --network sepolia");
  console.log("   2. Deploy MockUSDT: npx hardhat run scripts/deploy-mock-usdt.js --network sepolia");
  
  rl.close();
}

main().catch((error) => {
  console.error("❌ Setup failed:", error);
  rl.close();
  process.exit(1);
});

